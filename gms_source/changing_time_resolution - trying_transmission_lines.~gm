set t;
set runs/R1/;
set p/P001*P099/;
set hp/HP001*HP005/;
*set reg/SE,S,NE,N,NF/;
set reg/SE001*SE005/;
set ws/RS001*RS004/;
set m/m1*m4/;
set Technology/Thermal,Loss,Storage/;
set iTechnology/Wind,PV/;
set cParam/VarCost,Investment,MaxCap/;
set resCat/thermal,Wind,PV,spill,
           hydro,curtail_wind,curtail_pv,
           i_thermal,i_renewable_wind,
           i_renewable_PV,total_cost,
           elapsed,load,stor_in,stor_out,i_storage,hyd_store_lev,
           hydro_stor_out,
           hydro_total/;
set  resCatSmall(resCat)/
                         thermal,Wind,PV,spill,hydro,curtail_wind,curtail_pv,
                         total_cost,load,stor_in,stor_out,hyd_store_lev,hydro_total,hydro_stor_out/;




alias(p,p1);
alias(hp,hp1);
alias(reg,reg1);
alias(ws,ws1);

scalar scale;
scale=1;

*****load parameters*****
parameter load(reg,t);
parameter length(t);
parameter hydro(reg,t,ws,hp);
parameter intermittent(reg,t,p,iTechnology);
parameter hydroConvFact(reg,ws,hp);
parameter runOffDelay(reg,ws,hp);
parameter minFlow(reg,ws,hp);
parameter maxFlow(reg,ws,hp);
parameter maxReservoir(reg,ws,hp);
parameter maxHydPower(reg,ws,hp);
parameter upRiver(reg,ws,hp,hp1);
parameter investOptions(reg,p,technology,cParam);
parameter intermittentOptions(reg,p,iTechnology,cParam);
parameter transmissionCap(reg,reg1);
parameter spillRes(runs);
parameter initReservoir(reg,ws,hp);
parameter termReservoir(reg,ws,hp);

$GDXIN "input_tr.gdx"
$LOAD t,hydro,intermittent,minFlow,maxFlow,maxReservoir,upRiver
$LOAD hydroConvFact,runOffDelay,load,investOptions,length,transmissionCap
$load maxHydPower,intermittentOptions, initReservoir, termReservoir
$GDXIN

parameter results(runs,reg,resCat);
parameter invest_thermal_cap;

parameter test;
test=SUM((reg,t,ws,hp),hydro(reg,t,ws,hp));
display test;

*****helper variables*****

parameter existsIntermittent(reg,p,iTechnology);
existsIntermittent(reg,p,iTechnology)=sign(SUM((t),(intermittent(reg,t,p,iTechnology))));

parameter sInter(reg,p,iTechnology);
sInter(reg,p,iTechnology)=SUM((t),(intermittent(reg,t,p,iTechnology)));

display sInter;


parameter mult(runs,m);
mult(runs,m)=1;

parameter mult1(m);

display mult;


parameter existsHydro(reg,ws,hp);
existsHydro(reg,ws,hp)=sign(SUM(t,hydro(reg,t,ws,hp)));
parameter hasLoad(reg,t);
hasLoad(reg,t)=sign(load(reg,t));



display existsIntermittent,
        existsHydro,
        intermittent,
        investOptions,
        hasLoad
         ;

*****Scaling*****
load(reg,t)=load(reg,t)/scale;
hydro(reg,t,ws,hp)=hydro(reg,t,ws,hp)/scale;
minFlow(reg,ws,hp)=minFlow(reg,ws,hp)/scale;
maxFlow(reg,ws,hp)=maxFlow(reg,ws,hp)/scale;
maxReservoir(reg,ws,hp)=maxReservoir(reg,ws,hp)/scale;
transmissionCap(reg,reg1)=transmissionCap(reg,reg1)/scale;

parameter loadsum;
loadsum(reg)=SUM((t),load(reg,t));
display loadsum;

display load;


positive variables

***thermal power plants
x_term(reg,t,p),

***intermittent renewables
x_renew(reg,t,p,iTechnology),
x_invest_intermittent(reg,p,iTechnology),
x_curtail(reg,t,p,iTechnology),

***hydropower plants
x_hydro(reg,t,ws,hp),
x_spill(reg,t,ws,hp),
x_h_stor_in(reg,t,ws,hp),
x_h_stor_out(reg,t,ws,hp),
x_h_stor_lv(reg,t,ws,hp),
x_hyd_up(reg,t,ws,hp)

***other storage plants
x_stor_in(reg,t,p),
x_stor_out(reg,t,p),
x_stor_lev(reg,t,p),

***investments
x_invest_thermal_cap(reg,p),
x_invest_storage(reg,p)

***transmission
x_transfer_in(reg,reg1,t),
x_transfer_out(reg, reg1,t)

;


variables
x_slack(reg,t,ws,hp)
***transmission
*x_transfer(reg,reg1,t)
;


variables
totalCost
;

equations
objective

bal,

renewable,

renewable_maxCap,

hydro_bal,

hydro_up,

storage_h_lev,

storage_h_max,

h_init,

h_term,

min_flow,

max_flow,

max_hp_power,

storage_lev,

storage_max,

res_therm,

therm_max,

transmission_cap_out,

transmission_cap_in,

trans_eq1,trans_eq2,trans_eq3,trans_eq4,trans_eq5,trans_eq6,trans_eq7,trans_eq8,
trans_eq9,trans_eq10

;


objective             ..totalCost            =E= SUM((reg,t,p)$investOptions(reg,p,"Thermal","VarCost")         ,investOptions(reg,p,"Thermal","VarCost")*x_term(reg,t,p)*length(t))                           +
                                                 SUM((reg,p  )$investOptions(reg,p,"Thermal","Investment")      ,investOptions(reg,p,"Thermal","Investment")*x_invest_thermal_cap(reg,p))                      +
                                                 SUM((reg,p  )$investOptions(reg,p,"Storage","Investment")      ,investOptions(reg,p,"Storage","Investment")*x_invest_storage(reg,p))                          +
                                                 SUM((reg,p,iTechnology )$existsIntermittent(reg,p,iTechnology) ,intermittentOptions(reg,p,iTechnology,"Investment")*x_invest_intermittent(reg,p,iTechnology)) +
                                                 SUM((reg, reg1,t)                                              ,0.0020*x_transfer_out(reg, reg1,t))
*                                                 SUM((reg,reg1,t)                                               ,x_transfer(reg,reg1,t))*4.5
*+
*                                                 SUM((reg,t,ws,hp),-1*x_slack(reg,t,ws,hp)*700000)
                                                 ;

*balances supply and demand in the region
bal(reg,t)$(hasLoad(reg,t) or (ord(reg)=5))
                      ..load(reg,t)          =E= SUM(p$investOptions(reg,p,"Thermal","VarCost"),x_term(reg,t,p))                        +
                                                 SUM((ws,hp)$existsHydro(reg,ws,hp),0.99*x_h_stor_out(reg,t,ws,hp))                     +
                                                 SUM((p)$investOptions(reg,p,"Storage","Investment"),0.9*x_stor_out(reg,t,p))           +
                                                 SUM((p,iTechnology)$existsIntermittent(reg,p,iTechnology),x_renew(reg,t,p,iTechnology))+
                                                 SUM((ws,hp)$existsHydro(reg,ws,hp),x_hydro(reg,t,ws,hp))                               -
                                                 SUM(p$investOptions(reg,p,"Storage","Investment"),x_stor_in(reg,t,p))                  +
                                                 SUM(reg1$transmissionCap(reg,reg1),x_transfer_in(reg,reg1,t))                          -
                                                 SUM(reg1$transmissionCap(reg,reg1),x_transfer_out(reg,reg1,t));
*                                                 SUM(reg1$transmissionCap(reg,reg1),x_transfer(reg,reg1,t));

*+
*                                                 SUM(reg1$transmissionCap(reg,reg1),x_transfer_in(reg,reg1,t))                       -
*                                                 SUM(reg1$transmissionCap(reg,reg1),x_transfer_out(reg,reg1,t))
*                                                ;

*********Intermittent renewables*********

*renewable generation at each locatio
renewable(reg,t,p,iTechnology)$existsIntermittent(reg,p,iTechnology)
                    ..x_renew(reg,t,p,iTechnology)    +
                      x_curtail(reg,t,p,iTechnology)     =E= intermittent(reg,t,p,iTechnology) * x_invest_intermittent(reg,p,iTechnology);

renewable_maxCap(reg,p,iTechnology)$existsIntermittent(reg,p,iTechnology)
               ..x_invest_intermittent(reg,p,iTechnology) =L= intermittentOptions(reg,p,iTechnology,"MaxCap");


*********hydropower production*********

*balance hydropower production at each plant, depending on upper reservoir production
hydro_bal(reg,t,ws,hp)$(existsHydro(reg,ws,hp))
                     ..hydro(reg,t,ws,hp)    =E= x_hydro(reg,t,ws,hp)     +
                                                 x_spill(reg,t,ws,hp)     +
                                                 x_h_stor_in(reg,t,ws,hp) -
                                                 x_hyd_up(reg,t,ws,hp)
                                                 ;



*calculate up-river production
hydro_up(reg,t,ws,hp)$existsHydro(reg,ws,hp)
                     ..x_hyd_up(reg,t,ws,hp) =E= SUM((hp1)$upRiver(reg,ws,hp,hp1),hydroConvFact(reg,ws,hp1)*
                                                           (x_hydro(reg,t-runOffDelay(reg,ws,hp1),ws,hp1) +
                                                            x_spill(reg,t-runOffDelay(reg,ws,hp1),ws,hp1) +
                                                            x_h_stor_out(reg,t-runOffDelay(reg,ws,hp1),ws,hp1))
                                                 );

*level of storage in hydropower plants
storage_h_lev(reg,t,ws,hp)$(existsHydro(reg,ws,hp)  and
                        (ord(t)>1) and (ord(t)<card(t)))
                   ..x_h_stor_lv(reg,t,ws,hp)=E= x_h_stor_lv(reg,t-1,ws,hp) +
                                                 x_h_stor_in(reg,t,ws,hp)   -
                                                 x_h_stor_out(reg,t,ws,hp)
                                                 ;
*Initial storage level
h_init(reg,t,ws,hp)$(existsHydro(reg,ws,hp) and
                     (ord(t)=1))
                     ..x_h_stor_lv(reg,t,ws,hp)=E= maxReservoir(reg,ws,hp)*initReservoir(reg,ws,hp);

*Final storage level
h_term(reg,t,ws,hp)$(existsHydro(reg,ws,hp) and
                     (ord(t)=card(t)))
                     ..x_h_stor_lv(reg,t,ws,hp)=E= maxReservoir(reg,ws,hp)*termReservoir(reg,ws,hp);


*maximum level of storage
storage_h_max(reg,t,ws,hp)$existsHydro(reg,ws,hp)
                   ..x_h_stor_lv(reg,t,ws,hp)=L= maxReservoir(reg,ws,hp)*mult1("M1");

*miminum flow constraint
min_flow(reg,t,ws,hp)$existsHydro(reg,ws,hp)
                    ..minFlow(reg,ws,hp)*mult1("M2")     =L= x_hydro(reg,t,ws,hp)     +
                                                 x_spill(reg,t,ws,hp)     +
                                                 x_h_stor_out(reg,t,ws,hp)
                                                 ;

*maximum flow constraint
max_flow(reg,ws,hp,t)$existsHydro(reg,ws,hp)
                    ..maxFlow(reg,ws,hp)     =G= x_hydro(reg,t,ws,hp)     +
                                                 x_spill(reg,t,ws,hp)     +
                                                 x_h_stor_out(reg,t,ws,hp);

*maximum hydropower production, as limited by turbines
max_hp_power(reg,ws,hp,t)$existsHydro(reg,ws,hp)
                    ..maxHydPower(reg,ws,hp)*mult1("M4") =G= x_hydro(reg,t,ws,hp)+
                                                 x_h_stor_out(reg,t,ws,hp);

*********battery storage*********

*level of storage in batteries
storage_lev(reg,t,p)$investOptions(reg,p,"Storage","Investment")
                    ..x_stor_lev(reg,t,p)    =E= x_stor_lev(reg,t-1,p)+
                                                 x_stor_in(reg,t,p)-
                                                 x_stor_out(reg,t,p);
*maximum level of storage
storage_max(reg,t,p)$investOptions(reg,p,"Storage","Investment")
                    ..x_stor_lev(reg,t,p)    =L= x_invest_storage(reg,p);


*********thermal power production*********

*constraints production to maximal capacity
res_therm(reg,t,p)$investOptions(reg,p,"Thermal","maxCap")
                    ..x_term(reg,t,p)       =L= length(t)*x_invest_thermal_cap(reg,p);


therm_max(reg,p)$investOptions(reg,p,"Thermal","maxCap")
             ..x_invest_thermal_cap(reg,p)  =L= investOptions(reg,p,"Thermal","MaxCap");



*********transmission*********

*transmission_cap(reg,reg1,t)$transmissionCap(reg,reg1)
*               ..x_transfer(reg,reg1,t) =L= transmissionCap(reg,reg1)*mult1("M3");

*trans_eq(reg,reg1,t)$transmissionCap(reg,reg1)
*               ..x_transfer(reg,reg1,t)=E=x_transfer(reg1,reg,t)*(-1);

transmission_cap_out(reg,reg1,t)$transmissionCap(reg,reg1)
                ..x_transfer_out(reg,reg1,t) =L= transmissionCap(reg,reg1)*mult1("M3");

transmission_cap_in(reg,reg1,t)$transmissionCap(reg,reg1)
                ..x_transfer_in(reg,reg1,t) =L= transmissionCap(reg,reg1)*mult1("M3");

trans_eq1(reg,reg1,t)..x_transfer_out("SE001","SE002",t)  =E= x_transfer_in("SE002","SE001",t);
trans_eq2(reg,reg1,t)..x_transfer_out("SE001","SE003",t)  =E= x_transfer_in("SE003","SE001",t);
trans_eq3(reg,reg1,t)..x_transfer_out("SE001","SE005",t)  =E= x_transfer_in("SE005","SE001",t);
trans_eq4(reg,reg1,t)..x_transfer_out("SE002","SE001",t)  =E= x_transfer_in("SE001","SE002",t);
trans_eq5(reg,reg1,t)..x_transfer_out("SE003","SE005",t)  =E= x_transfer_in("SE005","SE003",t);
trans_eq6(reg,reg1,t)..x_transfer_out("SE004","SE005",t)  =E= x_transfer_in("SE005","SE004",t);
trans_eq7(reg,reg1,t)..x_transfer_out("SE003","SE001",t)  =E= x_transfer_in("SE001","SE003",t);
trans_eq8(reg,reg1,t)..x_transfer_out("SE005","SE001",t)  =E= x_transfer_in("SE001","SE005",t);
trans_eq9(reg,reg1,t)..x_transfer_out("SE005","SE004",t)  =E= x_transfer_in("SE004","SE005",t);
trans_eq10(reg,reg1,t)..x_transfer_out("SE005","SE003",t) =E= x_transfer_in("SE003","SE005",t);



*model mint /all/;

model mint/
          objective
          ,bal
          ,renewable
          ,renewable_maxCap
          ,hydro_bal
          ,hydro_up
          ,storage_h_lev
          ,storage_h_max
          ,min_flow
          ,max_flow
          ,max_hp_power
          ,h_init
          ,h_term
          ,storage_lev
          ,storage_max
          ,res_therm
          ,therm_max
          ,transmission_cap_out
          ,trans_eq1,trans_eq2,trans_eq3,trans_eq4,trans_eq5,trans_eq6,trans_eq7,trans_eq8,
trans_eq9,trans_eq10

/;

scalar starttime;
scalar elapsed;
OPTION RESLIM = 50000000;
option limrow=100;




loop(runs,

    mult1(m)=mult(runs,m);
    starttime = jnow;
    SOLVE mint using LP minimizing totalCost;
    spillRes(runs)=SUM((reg,ws,hp,t)$existsHydro(reg,ws,hp),x_spill.l(reg,t,ws,hp));

    elapsed = (jnow - starttime)*24*3600;

    results(runs,reg,"thermal")           =SUM((p,t),x_term.l(reg,t,p));
    results(runs,reg,"Wind")              =SUM((p,t)$existsIntermittent(reg,p,"Wind"),x_renew.l(reg,t,p,"Wind"));
    results(runs,reg,"PV")                =SUM((p,t)$existsIntermittent(reg,p,"PV"),x_renew.l(reg,t,p,"PV"));
    results(runs,reg,"spill")             =SUM((ws,hp,t)$existsHydro(reg,ws,hp),x_spill.l(reg,t,ws,hp));
    results(runs,reg,"hydro")             =SUM((ws,hp,t)$existsHydro(reg,ws,hp),x_hydro.l(reg,t,ws,hp));
    results(runs,reg,"hydro_stor_out")    =SUM((ws,hp,t)$existsHydro(reg,ws,hp),x_h_stor_out.l(reg,t,ws,hp));
    results(runs,reg,"hydro_total")       =SUM((ws,hp,t)$existsHydro(reg,ws,hp),x_h_stor_out.l(reg,t,ws,hp)+x_hydro.l(reg,t,ws,hp));
    results(runs,reg,"stor_in")           =SUM((p,t),x_stor_in.l(reg,t,p));
    results(runs,reg,"stor_out")          =SUM((p,t),x_stor_out.l(reg,t,p));
    results(runs,reg,"curtail_wind")      =SUM((t,p)$existsIntermittent(reg,p,"Wind"),x_curtail.l(reg,t,p,"Wind"));
    results(runs,reg,"curtail_pv")        =SUM((t,p)$existsIntermittent(reg,p,"PV"),x_curtail.l(reg,t,p,"PV"));
    results(runs,reg,"i_thermal")         =SUM((p),x_invest_thermal_cap.l(reg,p));
    results(runs,reg,"i_storage")         =SUM((p),x_invest_storage.l(reg,p));
    results(runs,reg,"i_renewable_wind")  =SUM((p),x_invest_intermittent.l(reg,p,"Wind"));
    results(runs,reg,"i_renewable_PV")    =SUM((p),x_invest_intermittent.l(reg,p,"PV"));
    results(runs,"SE001","total_cost")      =totalCost.l;
    results(runs,"SE001","elapsed")         =elapsed;
    results(runs,reg,"load")              =SUM((t),load(reg,t));
    results(runs,reg,"hyd_store_lev")     =SUM((t,ws,hp),x_h_stor_lv.l(reg,t,ws,hp))/card(t);
*   results(runs,reg,"loss")              =SUM((t),x_loss.l(reg,t));
*   results(runs,reg,"imports")           =SUM((reg1,t),x_transfer.l(reg1,reg,t));
*   results(runs,reg,"exports")           =SUM((reg1,t),x_transfer.l(reg,reg1,t));
*   results(runs,reg,"iflowQuantTotal")   =SUM((ws,hp,t),hydro(reg,ws,hp,t));

    results(runs,reg,resCatSmall)=round(results(runs,reg,resCatSmall)/10E5);
);

parameter transfer_in(reg,t),transfer_out(reg,t),transfer_net(reg,t),p_renew(reg,t,p,iTechnology);
transfer_in(reg,t)=SUM((reg1)$transmissionCap(reg,reg1),x_transfer_in.l(reg,reg1,t));
transfer_out(reg,t)=SUM((reg1)$transmissionCap(reg,reg1),x_transfer_out.l(reg,reg1,t));
transfer_net(reg,t)=transfer_in(reg,t)-transfer_out(reg,t);
p_renew(reg,t,p,iTechnology)$existsIntermittent(reg,p,iTechnology)=x_renew.l(reg,t,p,iTechnology)$existsIntermittent(reg,p,iTechnology);

parameter bal_(reg,t);
bal_(reg,t)=  load(reg,t)         - SUM(p$investOptions(reg,p,"Thermal","VarCost"),x_term.l(reg,t,p))                        +
                                                 SUM((ws,hp)$existsHydro(reg,ws,hp),0.99*x_h_stor_out.l(reg,t,ws,hp))                     +
                                                 SUM((p)$investOptions(reg,p,"Storage","Investment"),0.9*x_stor_out.l(reg,t,p))           +
                                                 SUM((p,iTechnology)$existsIntermittent(reg,p,iTechnology),x_renew.l(reg,t,p,iTechnology))+
                                                 SUM((ws,hp)$existsHydro(reg,ws,hp),x_hydro.l(reg,t,ws,hp))                               -
                                                 SUM(p$investOptions(reg,p,"Storage","Investment"),x_stor_in.l(reg,t,p))                  +
                                                 SUM(reg1$transmissionCap(reg,reg1),x_transfer_in.l(reg,reg1,t))                          -
                                                 SUM(reg1$transmissionCap(reg,reg1),x_transfer_out.l(reg,reg1,t));
*                                                 SUM(reg1$transmissionCap(reg,reg1),x_transfer.l(reg,reg1,t));

display  results,
         transfer_in,
         transfer_out,
         bal_;

option gdxUELs=full;

Execute_Unload 'results_time_resolution.gdx';
*,x_term,x_stor_out,x_renew,load,intermittent,hydro,x_stor_in,x_curtail,elapsed;

